# MIT License
#
# Copyright (c) 2020 Joshua E Gentry

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# =========================================================================================
"""
    struct PipelineTask
        event::Condition
        done::Ref{Bool}
        task::Task
    end

Encapsulates all the data needed to monitor and stop a task reading the data from
Tesseract.

__Values:__

| Name   | Description
| :----- | :----------
| event  | The event to trigger when there is likely more data or the done flag is set.
| done   | The flag to set when the Tesseract process is done.
| task   | The background task that is actually executing.

__Constructors:__

    PipelineTask(event, done, task)

Create a new instance of the object.  Sets a finalizer to ensure that the background task
is terminated when this object is garbage collected.
"""
struct PipelineTask
    event::Condition
    done::Ref{Bool}
    task::Task
end

# =========================================================================================
"""
    pipeline_stop_task(
        task::PipelineTask,
        waitFor::Bool = true
    )::Nothing

Stop the background task and wait for it to terminate before returning.

__Arguments:__

| T | Name    | Default | Description
|---| :------ | :------ | :----------
| R | task    |         | The task to terminate.
| O | waitFor | `true`  | Wait for the tasks to terminate?
"""
function pipeline_stop_task(
            task::PipelineTask,
            waitFor::Bool = true
        )::Nothing
    task.done[] = true
    notify(task.event)
    if waitFor == true
        wait(task.task)
    end
    nothing
end

# =========================================================================================
"""
    pipeline_start_task(
        source::AbstractString,
        target::AbstractString
    )::PipelineTask

Start a background task that waits for the job to complete then renames the output file.

__Arguments:__

| T | Name   | Default | Description
|---| :----- | :------ | :----------
| R | source |         | The file name being generated by Tesseract.
| R | target |         | The target filename to rename the file to.
"""
function pipeline_start_task(
            source::AbstractString,
            target::AbstractString
        )::PipelineTask
    local event = Condition()
    local done  = Ref{Bool}(false)
    local task = @async begin
        while(done[] == false)
            wait(event)
        end
        mv(source, target; force = true)
    end

    return PipelineTask(event, done, task)
end

# =========================================================================================
"""
    pipeline_start_task(
        path::AbstractString,
        filename::AbstractString,
        output::AbstractString
)::PipelineTask

Start a background task that transcodes the file generate by Tesseract to UTF-8.

__Arguments:__

| T | Name     | Default | Description
|---| :------- | :------ | :----------
| R | path     |         | The directory the temporary file is being created in.
| R | filename |         | The name of the file being created by Tesseract.
| R | output   |         | The filename we want to write to.
"""
function pipeline_start_task(
            path::AbstractString,
            filename::AbstractString,
            output::AbstractString
        )::PipelineTask
    local event   = Condition()
    local done    = Ref{Bool}(false)
    local outFile = open(output; create=true, write=true)

    local task
    try
        task = start_job(event, done, path, filename, true) do job
            job_copy(job, outFile)
            close(outFile)
        end
    catch ex
        isopen(outFile) && close(outFile)
        rethrow(ex)
    end

    return PipelineTask(event, done, task)
end

# =========================================================================================
"""
    pipeline_start_task(
        path:AbstractString,
        filename::AbstractString,
        output::TessOutput{UInt8},
        transcode::Bool = false
    )::PipelineTask

Start a background task to read a file created by Tesseract and convert it to a byte array.

__Arguments:__

| T | Name      | Default | Description
|---| :-------- | :------ | :----------
| R | path      |         | The directory to use for the task.
| R | filename  |         | The filename that Tesseract will be writing to.
| R | output    |         | The object to write the result to.
| O | transcode | `false` | Should the file be transcoded from Latin-1 to UTF-8?
"""
function pipeline_start_task(
            path::AbstractString,
            filename::AbstractString,
            output::TessOutput{Vector{UInt8}},
            transcode::Bool = false
        )::PipelineTask
    local event = Condition()
    local done  = Ref{Bool}(false)
    local task  = start_job(event, done, path, filename, transcode) do job
        job_create_byte_array(job, output)
    end

    return PipelineTask(event, done, task)
end

# =========================================================================================
"""
    pipeline_start_task(
        path::AbstractString,
        filename::AbstractString,
        output::TessOutput{String},
        transcode::Bool = false
    )::PipelineTask

Start a background task to read a file created by Tesseract and convert it to a string.

__Arguments:__

| T | Name      | Default | Description
|---| :-------- | :------ | :----------
| R | path      |         | The directory to use for the task.
| R | filename  |         | The filename that Tesseract will be writing to.
| R | output    |         | The object to write the result to.
| O | transcode | `false` | Should the file be transcoded from Latin-1 to UTF-8?
"""
function pipeline_start_task(
            path::AbstractString,
            filename::AbstractString,
            output::TessOutput{String},
            transcode::Bool = false
        )::PipelineTask
    local event = Condition()
    local done  = Ref{Bool}(false)
    local task  = start_job(event, done, path, filename, transcode) do job
        job_create_string(job, output)
    end

    return PipelineTask(event, done, task)
end

# =========================================================================================
"""
    pipeline_start_task(
        path::AbstractString,
        filename::AbstractString,
        dispatch::Function,
        pageSeparator::AbstractString,
        transcode::Bool = false
    )::PipelineTask

Start a background task to read a file created by Tesseract and dispatch all the lines to
the specified function.

__Arguments:__

| T | Name      | Default | Description
|---| :-------- | :------ | :----------
| R | path      |         | The directory to use for the task.
| R | filename  |         | The filename that Tesseract will be writing to.
| R | dispatch  |         | The function to dispatch the lines to.
| R | separator |         | The string that Tesseract is using to separate pages.
| O | transcode | `false` | Should the file be transcoded from Latin-1 to UTF-8?
"""
function pipeline_start_task(
            path::AbstractString,
            filename::AbstractString,
            dispatch::Function,
            separator::AbstractString,
            transcode::Bool = false
        )::PipelineTask
    local event = Condition()
    local done  = Ref{Bool}(false)
    local task  = start_job(event, done, path, filename, transcode) do job
        job_dispatch(job, dispatch, separator)
    end

    return PipelineTask(event, done, task)
end
